{
  "hash": "c2206cfc8fa25c0eabd66999fdf2bfb9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Data import' \n---\n\n\n\n\n\n### Exercise 1: Save a local copy of the data file {.unnumbered}\n\n#### Part a {.unnumbered}\n\nOn your laptop:\n\n-   Download the \"imdb_5000_messy.csv\" file from Moodle\n-   Move it to the *data* folder you created at the beginning of class\n\n#### Part b {.unnumbered}\n\nHot tip: After saving your data file, it's important to record appropriate citations and info in either a new Rmd (eg: \"imdb_5000_messy_README.Rmd\") or in the Rmd where you'll analyze the data. These citations should include:\n\n-   the data *source*, i.e. where you *found* the data\n-   the data *creator*, i.e. who / what group *collected* the original data\n-   possibly a data *codebook*, i.e. descriptions of the data variables\n\nTo this end, check out where we originally got our IMDB data:\n\nhttps://www.kaggle.com/datasets/tmdb/tmdb-movie-metadata\n\nAfter visiting that website, take some quick notes here on the data *source* and *creator*.\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: Import the data into RStudio {.unnumbered}\n\nNow that we have a local copy of our data file, let's get it into RStudio! Remember that this process depends on 2 things: the file *type* and *location*. Since our file *type* is a csv, we can import it using `read_csv()`. But we have to supply the file *location* through a file path. To this end, we can either use an **absolute file path** or a **relative file path**.\n\n#### Part a {.unnumbered}\n\nAn absolute file path describes the location of a file starting from the root or home directory. How we refer to the user root directory depends upon your machine:\n\n-   On a Mac: `~`\n-   On Windows: typically `C:\\`\n\nThen the complete file path to the IMDB data file in the data folder, depending on your machine an where you created your portfolio project, can be:\n\n-   On a Mac: `~/Desktop/portfolio/data/imdb_5000_messy.csv`\n-   On Windows: `C:\\Desktop\\portfolio\\data\\imdb_5000_messy.csv` or `C:\\\\Desktop\\\\portfolio\\\\data\\\\imdb_5000_messy.csv`\n\nPutting this together, use `read_csv()` with the appropriate absolute file path to import your data into RStudio. Save this as `imdb_messy`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nimdb_messy <- read_csv(\"/Users/tanisha/Desktop/Classes fall 2024/stat112/mac-112-portfolio/activities/imdb_5000_messy.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nRows: 5043 Columns: 29\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(12): color, director_name, actor_2_name, genres, actor_1_name, movie_ti... dbl\n(17): ...1, num_critic_for_reviews, duration, director_facebook_likes, a...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n\n\n:::\n:::\n\n\n\n\n\n#### Part b {.unnumbered}\n\nAbsolute file paths can get really long, depending upon our number of sub-folders, and they should not be used when sharing code with other and instead **relative file paths** should be used.  A **relative file path** describes the location of a file from the current \"working directory\", i.e. where RStudio would currently look for on your computer. Check what your working directory is *inside this Rmd*:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This should be the folder where you stored this Rmd!\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/tanisha/Desktop/Classes fall 2024/stat112/mac-112-portfolio/activities\"\n```\n\n\n:::\n:::\n\n\n\n\n\nNext, check what the working directory is for the *console* by typing `getwd()` in the *console*. This is probably different, meaning that the relative file paths that will work in your Rmd won't work in the console! You can either exclusively work inside your Rmd, or change the working directory in your console, by navigating to the following in the upper toolbar: Session \\> Set Working Directory \\> To Source File location.\n\n#### Part c {.unnumbered}\n\nAs is good practice, we created a `data` folder and saved our data file (`imdb_5000_messy.csv`) into.\n\nSince our .Rmd analysis and .csv data live in the same project, we don't have to write out *absolute file paths* that go all the way to the root directory. We can use *relative file paths* that start from where our code file exists to where the data file exist:\n\n-   On a Mac: `../data/imdb_5000_messy.csv`\n-   On Windows: `..\\data\\imdb_5000_messy.csv` or `..\\\\data\\\\imdb_5000_messy.csv`\n\n**NOTE**: `..` means go one level up in the file hierarchy, ie, go to the parent folder/directory.\n\nPutting this together, use `read_csv()` with the appropriate relative file path to import your data into RStudio. Save this as `imdb_temp` (`temp` for \"temporary\"). Convince yourself that this worked, i.e. you get the same dataset as `imdb_messy`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_temp <- read_csv('../activities/imdb_5000_messy.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nRows: 5043 Columns: 29\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(12): color, director_name, actor_2_name, genres, actor_1_name, movie_ti... dbl\n(17): ...1, num_critic_for_reviews, duration, director_facebook_likes, a...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-tip title=\"File Paths\"}\n\nAbsolute file paths should be used when referring to files hosed on the web, eg, `https://mac-stat.github.io/data/kiva_partners2.csv`.  In all other instances, relative file paths are recommended.\n\n:::\n\n#### Part d: OPTIONAL {.unnumbered}\n\nSometimes, we don't want to import the *entire* dataset. For example, we might want to...\n\n-   skips some rows (eg: if they're just \"filler\")\n-   only import the *first* \"n\" rows (eg: if the dataset is really large)\n-   only import a *random* subset of \"n\" rows (eg: if the dataset is really large)...\n\nThe \"data import cheat sheet\" at the top of this Rmd, or Google, are handy resources here. As one example...\n\n::: {.callout-tip title=\"Commenting/Uncommenting Code\"}\n\nTo comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd+shift+c</kbd>.\n\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Try importing only the first 5 rows\nread_csv(\"/Users/tanisha/Desktop/Classes fall 2024/stat112/mac-112-portfolio/activities/imdb_5000_messy.csv\", n_max = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nRows: 5 Columns: 29\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(12): color, director_name, actor_2_name, genres, actor_1_name, movie_ti... dbl\n(17): ...1, num_critic_for_reviews, duration, director_facebook_likes, a...\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 29\n   ...1 color director_name     num_critic_for_reviews duration\n  <dbl> <chr> <chr>                              <dbl>    <dbl>\n1     1 Color James Cameron                        723      178\n2     2 Color Gore Verbinski                       302      169\n3     3 Color Sam Mendes                           602      148\n4     4 Color Christopher Nolan                    813      164\n5     5 <NA>  Doug Walker                           NA       NA\n# ℹ 24 more variables: director_facebook_likes <dbl>,\n#   actor_3_facebook_likes <dbl>, actor_2_name <chr>,\n#   actor_1_facebook_likes <dbl>, gross <dbl>, genres <chr>,\n#   actor_1_name <chr>, movie_title <chr>, num_voted_users <dbl>,\n#   cast_total_facebook_likes <dbl>, actor_3_name <chr>,\n#   facenumber_in_poster <dbl>, plot_keywords <chr>, movie_imdb_link <chr>,\n#   num_user_for_reviews <dbl>, language <chr>, country <chr>, …\n```\n\n\n:::\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 3: Preliminary data checks {.unnumbered}\n\nAfter importing new data into RStudio, you MUST do some quick checks of the data. Here are two first steps that are especially useful.\n\n#### Part a {.unnumbered}\n\nOpen `imdb_messy` in the spreadsheet-like viewer by typing `View(imdb_messy)` in the console. Sort this \"spreadsheet\" by different variables by clicking on the arrows next to the variable names. Do you notice anything unexpected?\n\n#### Part b {.unnumbered}\n\nDo a quick `summary()` of each variable in the dataset. *One* way to do this is below:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n imdb_messy |>\n   mutate(across(where(is.character), as.factor)) |>  # convert characters to factors in order to summarize\n   summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      ...1                  color               director_name \n Min.   :   1   B&W            :  10   Steven Spielberg:  26  \n 1st Qu.:1262   Black and White: 199   Woody Allen     :  22  \n Median :2522   color          :  30   Clint Eastwood  :  20  \n Mean   :2522   Color          :4755   Martin Scorsese :  20  \n 3rd Qu.:3782   COLOR          :  30   Ridley Scott    :  17  \n Max.   :5043   NA's           :  19   (Other)         :4834  \n                                       NA's            : 104  \n num_critic_for_reviews    duration     director_facebook_likes\n Min.   :  1.0          Min.   :  7.0   Min.   :    0.0        \n 1st Qu.: 50.0          1st Qu.: 93.0   1st Qu.:    7.0        \n Median :110.0          Median :103.0   Median :   49.0        \n Mean   :140.2          Mean   :107.2   Mean   :  686.5        \n 3rd Qu.:195.0          3rd Qu.:118.0   3rd Qu.:  194.5        \n Max.   :813.0          Max.   :511.0   Max.   :23000.0        \n NA's   :50             NA's   :15      NA's   :104            \n actor_3_facebook_likes          actor_2_name  actor_1_facebook_likes\n Min.   :    0.0        Morgan Freeman :  20   Min.   :     0        \n 1st Qu.:  133.0        Charlize Theron:  15   1st Qu.:   614        \n Median :  371.5        Brad Pitt      :  14   Median :   988        \n Mean   :  645.0        James Franco   :  11   Mean   :  6560        \n 3rd Qu.:  636.0        Meryl Streep   :  11   3rd Qu.: 11000        \n Max.   :23000.0        (Other)        :4959   Max.   :640000        \n NA's   :23             NA's           :  13   NA's   :7             \n     gross                            genres             actor_1_name \n Min.   :      162   Drama               : 236   Robert De Niro:  49  \n 1st Qu.:  5340988   Comedy              : 209   Johnny Depp   :  41  \n Median : 25517500   Comedy|Drama        : 191   Nicolas Cage  :  33  \n Mean   : 48468408   Comedy|Drama|Romance: 187   J.K. Simmons  :  31  \n 3rd Qu.: 62309438   Comedy|Romance      : 158   Bruce Willis  :  30  \n Max.   :760505847   Drama|Romance       : 152   (Other)       :4852  \n NA's   :884         (Other)             :3910   NA's          :   7  \n                    movie_title   num_voted_users   cast_total_facebook_likes\n Ben-Hur                  :   3   Min.   :      5   Min.   :     0           \n Halloween                :   3   1st Qu.:   8594   1st Qu.:  1411           \n Home                     :   3   Median :  34359   Median :  3090           \n King Kong                :   3   Mean   :  83668   Mean   :  9699           \n Pan                      :   3   3rd Qu.:  96309   3rd Qu.: 13756           \n The Fast and the Furious :   3   Max.   :1689764   Max.   :656730           \n (Other)                  :5025                                              \n         actor_3_name  facenumber_in_poster\n Ben Mendelsohn:   8   Min.   : 0.000      \n John Heard    :   8   1st Qu.: 0.000      \n Steve Coogan  :   8   Median : 1.000      \n Anne Hathaway :   7   Mean   : 1.371      \n Jon Gries     :   7   3rd Qu.: 2.000      \n (Other)       :4982   Max.   :43.000      \n NA's          :  23   NA's   :13          \n                                                                           plot_keywords \n based on novel                                                                   :   4  \n 1940s|child hero|fantasy world|orphan|reference to peter pan                     :   3  \n alien friendship|alien invasion|australia|flying car|mother daughter relationship:   3  \n animal name in title|ape abducts a woman|gorilla|island|king kong                :   3  \n assistant|experiment|frankenstein|medical student|scientist                      :   3  \n (Other)                                                                          :4874  \n NA's                                                                             : 153  \n                                             movie_imdb_link\n http://www.imdb.com/title/tt0077651/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt0232500/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt0360717/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt1976009/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt2224026/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt2638144/?ref_=fn_tt_tt_1:   3  \n (Other)                                             :5025  \n num_user_for_reviews     language       country       content_rating\n Min.   :   1.0       English :4704   USA    :3807   R        :2118  \n 1st Qu.:  65.0       French  :  73   UK     : 448   PG-13    :1461  \n Median : 156.0       Spanish :  40   France : 154   PG       : 701  \n Mean   : 272.8       Hindi   :  28   Canada : 126   Not Rated: 116  \n 3rd Qu.: 326.0       Mandarin:  26   Germany:  97   G        : 112  \n Max.   :5060.0       (Other) : 160   (Other): 406   (Other)  : 232  \n NA's   :21           NA's    :  12   NA's   :   5   NA's     : 303  \n     budget            title_year   actor_2_facebook_likes   imdb_score   \n Min.   :2.180e+02   Min.   :1916   Min.   :     0         Min.   :1.600  \n 1st Qu.:6.000e+06   1st Qu.:1999   1st Qu.:   281         1st Qu.:5.800  \n Median :2.000e+07   Median :2005   Median :   595         Median :6.600  \n Mean   :3.975e+07   Mean   :2002   Mean   :  1652         Mean   :6.442  \n 3rd Qu.:4.500e+07   3rd Qu.:2011   3rd Qu.:   918         3rd Qu.:7.200  \n Max.   :1.222e+10   Max.   :2016   Max.   :137000         Max.   :9.500  \n NA's   :492         NA's   :108    NA's   :13                            \n  aspect_ratio   movie_facebook_likes\n Min.   : 1.18   Min.   :     0      \n 1st Qu.: 1.85   1st Qu.:     0      \n Median : 2.35   Median :   166      \n Mean   : 2.22   Mean   :  7526      \n 3rd Qu.: 2.35   3rd Qu.:  3000      \n Max.   :16.00   Max.   :349000      \n NA's   :329                         \n```\n\n\n:::\n:::\n\n\n\n\n\nFollow-up:\n\n-   What type of info is provided on quantitative variables? \n\nMinimum, Maximum, Median, 1st quartile, 3rd quartile \n\n-   What type of info is provided on categorical variables?\n\nNumber of each category in the daatset \n\n-   What stands out to you in these summaries? Is there anything you'd need to clean before using this data?\n\nSo many NAs, create dummy variables for genres, color. \n\n\n\\\n\\\n\\\n\\\n\n### Exercise 4: Preliminary cleaning -- factor variables 1 {.unnumbered}\n\nIf you didn't already in Exercise 3, check out the `color` variable in the `imdb_messy` dataset.\n\n-   What's goofy about this / what do we need to fix? B& W and black and white are the same. Also, Color, color, and COLOR are all the same \n\n-   More specifically, what different categories does the `color` variable take, and how many movies fall into each of these categories?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_messy%>%\ncount(color)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  color               n\n  <chr>           <int>\n1 B&W                10\n2 Black and White   199\n3 COLOR              30\n4 Color            4755\n5 color              30\n6 <NA>               19\n```\n\n\n:::\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 5: Preliminary cleaning -- factor variables 2 {.unnumbered}\n\nWhen working with categorical variables like `color`, the categories must be \"clean\", i.e. consistent and in the correct format. Let's make that happen.\n\n#### Part a {.unnumbered}\n\nWe *could* open the .csv file in, say, Excel or Google sheets, clean up the `color` variable, save a clean copy, and then reimport that into RStudio. BUT that would be the wrong thing to do. Why is it important to use R code, which we then save inside this Rmd, to clean our data?\n\nIt wouldn't be reproducible. \n\n#### Part b {.unnumbered}\n\nLet's use R code to change the `color` variable so that it appropriately combines the various categories into only 2: `Color` and `Black_White`. We've learned a couple sets of string-related tools that could be handy here. First, starting with the `imdb_messy` data, change the `color` variable using one of the functions we learned in Activity 12:\n\n`fct_relevel()`, `fct_recode()`, `fct_reorder()`\n\nStore your results in `imdb_temp` (don't overwrite `imdb_messy`). To check your work, print out a `count()` table of the `color` variable in `imdb_temp`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_temp<-imdb_temp%>%\n  mutate(color=fct_recode(color, 'Color'='color', 'B&W'='B&W', 'Color'='Color', 'Color'='COLOR', 'B&W'='Black and White'))\n\nimdb_temp%>%\n  count(color)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  color     n\n  <fct> <int>\n1 B&W     209\n2 Color  4815\n3 <NA>     19\n```\n\n\n:::\n:::\n\n\n\n\n\n#### Part c {.unnumbered}\n\nRepeat Part b using one of our string functions from the String chpater:\n\n`str_replace()`, `str_replace_all()`, `str_to_lower()`, `str_sub()`, `str_length()`, `str_detect()`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_temp<-imdb_temp%>%\n  mutate(color=str_replace(color, 'Black and White', 'B&W'))%>%\n  mutate(color=str_replace(color, 'COLOR', 'Color'))%>%\n  mutate(color=str_replace(color, 'color', 'Color'))\n\nimdb_temp%>%\n  count(color)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  color     n\n  <chr> <int>\n1 B&W     209\n2 Color  4815\n3 <NA>     19\n```\n\n\n:::\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 6: Preliminary cleaning -- missing data 1 {.unnumbered}\n\nThroughout these exercises, you've probably noticed that there's a bunch of missing data. This is encoded as `NA` (not available) in R. There are a few questions to address about missing data:\n\n-   *How many* values are missing data? What's the volume of the missingness?\n-   *Why* are some values missing?\n-   *What* should we do about the missing values?\n\nLet's consider the first 2 questions in this exercise.\n\n#### Part a {.unnumbered}\n\nAs a first step, let's simply understand the *volume* of NAs. Specifically:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count the total number of rows in imdb_messy\nnrow(imdb_messy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5043\n```\n\n\n:::\n\n```{.r .cell-code}\n# Then count the number of NAs in each column\ncolSums(is.na(imdb_messy))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     ...1                     color             director_name \n                        0                        19                       104 \n   num_critic_for_reviews                  duration   director_facebook_likes \n                       50                        15                       104 \n   actor_3_facebook_likes              actor_2_name    actor_1_facebook_likes \n                       23                        13                         7 \n                    gross                    genres              actor_1_name \n                      884                         0                         7 \n              movie_title           num_voted_users cast_total_facebook_likes \n                        0                         0                         0 \n             actor_3_name      facenumber_in_poster             plot_keywords \n                       23                        13                       153 \n          movie_imdb_link      num_user_for_reviews                  language \n                        0                        21                        12 \n                  country            content_rating                    budget \n                        5                       303                       492 \n               title_year    actor_2_facebook_likes                imdb_score \n                      108                        13                         0 \n             aspect_ratio      movie_facebook_likes \n                      329                         0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Then count the number of NAs in a specific column\nimdb_messy |> \n  filter(is.na(actor_1_facebook_likes))%>%\n     count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1     7\n```\n\n\n:::\n:::\n\n\n\n\n\n#### Part b {.unnumbered}\n\nAs a second step, let's think about *why* some values are missing. Study the individual observations with NAs carefully. Why do you think they are missing? Are certain films more likely to have more NAs than others?\n\n#### Part c {.unnumbered}\n\nConsider a more specific example. Obtain a dataset of movies that are missing data on `actor_1_facebook_likes`. Then explain why you think there are NAs. HINT: `is.na(___)`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nna<-imdb_temp%>%\n  filter(is.na(actor_1_facebook_likes))\n```\n:::\n\n\n\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 7: Preliminary cleaning -- missing data 2 {.unnumbered}\n\nNext, let's think about what to *do* about the missing values. There is no perfect or universal approach here. Rather, we must think carefully about...\n\n-   why the values are missing\n-   what we want to do with our data\n-   the impact of removing or replacing missing data on our work / conclusions\n\n#### Part a {.unnumbered}\n\nCalculate the average duration of a film. THINK: How can we deal with the NA's?\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_messy%>%\n  summarize(avg_duration=mean(duration, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  avg_duration\n         <dbl>\n1         107.\n```\n\n\n:::\n:::\n\n\n\n\n\nFollow-up:\n\nHow are the NAs dealt with here? Did we have to create and save a new dataset in order to do this analysis?\n\nWe just remove the cases that have NA for their duration. No. \n\n#### Part b {.unnumbered}\n\nTry out the `drop_na()` function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_temp <- drop_na(imdb_messy)\ndim(imdb_temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3756   29\n```\n\n\n:::\n:::\n\n\n\n\n\nFollow-up questions:\n\n-   What did `drop_na()` do? How many data points are left?\n-   In what situations might this function be a good idea? If you don't want to impute ANY values. \n-   In what situations might this function be a bad idea?\n\n#### Part c {.unnumbered}\n\n`drop_na()` removes data points that have *any* NA values, even if we don't care about the variable(s) for which data is missing. This can result in losing a lot of data points that *do* have data on the variables we actually care about! For example, suppose we only want to explore the relationship between film `duration` and whether it's in `color`. Check out a plot:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(imdb_messy, aes(x = duration, fill = color)) +\n  geom_density()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 15 rows containing non-finite values (`stat_density()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Data_import_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\nFollow-up:\n\n-   Create a new dataset with *only* and *all* movies that have complete info on `duration` and `color`. HINT: You could use `!is.na(___)` or `drop_na()` (differently than above)\n\n-   Use this new dataset to create a new and improved plot.\n\n-   How many movies remain in your new dataset? Hence why this is better than using the dataset from part b? More movies stay in our dataset. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew<-imdb_messy%>%\n  select(duration, color)%>%\n  drop_na()\n\ndim(new)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5010    2\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(new, aes(x = duration, fill = color)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Data_import_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### Part d {.unnumbered}\n\nIn some cases, missing data is more *non*-data than *unknown* data. For example, the films with NAs for `actor_1_facebook_likes` actually have *0* Facebook likes -- they don't even have actors! In these cases, we can *replace* the NAs with a 0. Use the `replace_na()` function to create a new dataset (`imdb_temp`) that replaces the NAs in `actor_1_facebook_likes` with 0. You'll have to check out the help file for this function.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb_temp%>%\n  mutate(actor_1_facebook_likes=replace_na(0))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,756 × 29\n    ...1 color director_name     num_critic_for_reviews duration\n   <dbl> <chr> <chr>                              <dbl>    <dbl>\n 1     1 Color James Cameron                        723      178\n 2     2 Color Gore Verbinski                       302      169\n 3     3 Color Sam Mendes                           602      148\n 4     4 Color Christopher Nolan                    813      164\n 5     6 Color Andrew Stanton                       462      132\n 6     7 Color Sam Raimi                            392      156\n 7     8 Color Nathan Greno                         324      100\n 8     9 Color Joss Whedon                          635      141\n 9    10 Color David Yates                          375      153\n10    11 Color Zack Snyder                          673      183\n# ℹ 3,746 more rows\n# ℹ 24 more variables: director_facebook_likes <dbl>,\n#   actor_3_facebook_likes <dbl>, actor_2_name <chr>,\n#   actor_1_facebook_likes <dbl>, gross <dbl>, genres <chr>,\n#   actor_1_name <chr>, movie_title <chr>, num_voted_users <dbl>,\n#   cast_total_facebook_likes <dbl>, actor_3_name <chr>,\n#   facenumber_in_poster <dbl>, plot_keywords <chr>, movie_imdb_link <chr>, …\n```\n\n\n:::\n:::\n",
    "supporting": [
      "Data_import_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}