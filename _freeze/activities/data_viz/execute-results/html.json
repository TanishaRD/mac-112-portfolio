{
  "hash": "744c0a3f2ef72cb09dda108a9db0a89a",
  "result": {
    "markdown": "---\ntitle: \"Data viz (Notes)\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    embed-resources: true\n---\n\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-2_040db88aafd4653498b6db1dfc3f55c0'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n**Directions**\n\n-   General\n    -   Be kind to yourself.\n    -   Collaborate with and be kind to others. You are expected to work together as a group.\n    -   Ask questions. Remember that we won't discuss these exercises as a class.\n-   Activity specific\n    -   The best way to learn `ggplot` is to just play around. Focus on the *patterns* and *potential* of the code. Don't worry about memorizing anything! You will naturally start to remember the most important / common code the more and more you use it.\n\n\\\n\\\n\n## Exercise 1: Research questions {.unnumbered}\n\nLet's dig into the `hikes` data, starting with the `elevation` and difficulty `ratings` of the hikes:\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-3_cc828f250b04ca723464f59bee612f4e'}\n\n```{.r .cell-code}\nhikes <- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")\n```\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-4_bc78d0365e47a6570bd621e206c4bde7'}\n\n```{.r .cell-code}\nhead(hikes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             peak elevation difficulty ascent length time    rating\n1     Mt. Marcy        5344          5   3166   14.8 10.0  moderate\n2 Algonquin Peak       5114          5   2936    9.6  9.0  moderate\n3   Mt. Haystack       4960          7   3570   17.8 12.0 difficult\n4   Mt. Skylight       4926          7   4265   17.9 15.0 difficult\n5 Whiteface Mtn.       4867          4   2535   10.4  8.5      easy\n6       Dix Mtn.       4857          5   2800   13.2 10.0  moderate\n```\n:::\n:::\n\n\na.  What features would we like a visualization of the *categorical* difficulty `rating` variable to capture?\n\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-5_a2dc67310d7518e50217dd361278e05d'}\n\n```{.r .cell-code}\nggplot(hikes, aes(x=rating))+ \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWe would use a bar chart, because rating is categorical. \n\nb.  What about a visualization of the *quantitative* `elevation` variable?\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-6_52200ff15bb01adde3f5e4cdc1ff17b8'}\n\n```{.r .cell-code}\nggplot(hikes, aes(x=elevation))+ \n  geom_density()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWe could use a density plot or histogram, because elevation is a quantitative variable. \n\n\\\n\\\n\n## Exercise 2: Load tidyverse {.unnumbered}\n\nWe'll address the above questions using `ggplot` tools. Try running the following chunk and simply take note of the error message -- this is one you'll get a lot!\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-7_68aa12756b02f86a906ab79ceca7def7'}\n\n```{.r .cell-code}\n# Use the ggplot function\nggplot(hikes, aes(x = rating))\n```\n:::\n\n\nIn order to use `ggplot` tools, we have to first *load* the `tidyverse` package in which they live. Mainly, we've *installed* the package but need to tell R when we want to *use* it. Run the chunk below to load the library. You'll need to do this within any .qmd file that uses `ggplot()`.\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-8_7c2335f30a57322551deb91d2fa25dc3'}\n\n```{.r .cell-code}\n# Load the package\nlibrary(tidyverse)\n```\n:::\n\n\n\\\n\\\n\\\n\\\n\n## Exercise 3: Bar chart of ratings (part 1) {.unnumbered}\n\nConsider some specific research questions about the difficulty `rating` of the hikes:\n\nHow many hikes fall into each category? Are the hikes evenly distributed among these categories, or are some more common than others?\n\nAll of these questions can be answered with: (1) a **bar chart**; of (2) the *categorical* data recorded in the `rating` column. First, set up the plotting **frame**:\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-9_cb4c31ff385bfc4c69a46f8d906a7715'}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = rating))+ \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nModerate hikes are the most common hikes. \n\nThink about:\n\n-   What did this do? What do you observe?\n-   What, in general, is the first argument of the `ggplot()` function? Data \n-   What is the purpose of writing `x = rating`? Mapping the data \n-   What do you think `aes` stands for?!? Aesthetics \n\n\\\n\\\n\\\n\\\n\n## Exercise 4: Bar chart of ratings (part 2) {.unnumbered}\n\nNow let's add a **geometric layer** to the frame / canvas, and start customizing the plot's **theme**. To this end, try each chunk below, *one by one*. In each chunk, make a comment about how both the code and the corresponding plot both changed.\n\nNOTE:\n\n-   Pay attention to the general code properties and structure, not memorization.\n-   Not all of these are \"good\" plots. We're just exploring `ggplot`.\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-10_13ced36e4cf588702090ef5627cd7732'}\n\n```{.r .cell-code}\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = rating)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-11_2ba3db5301cda7fcf467d836c5aae24e'}\n\n```{.r .cell-code}\n# The x and y axes labels changed by using the labs layer \nggplot(hikes, aes(x = rating)) +\n  geom_bar() +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-12_4a812f86343758f09fb8ce4c9ccb5cba'}\n\n```{.r .cell-code}\n# The bars are now blue by using the fill argument in the geom_bar function \nggplot(hikes, aes(x = rating)) +\n  geom_bar(fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-13_4ef62e3a9cf699247aa6cdc0dcce1f36'}\n\n```{.r .cell-code}\n# The outline of the bars is orange now, using the color argument in geom_bar\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-14_9dcf01cfe71ba035da89396a99e677e5'}\n\n```{.r .cell-code}\n# The gray background is gone! \nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\")  +\n  labs(x = \"Rating\", y = \"Number of hikes\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n## Exercise 5: Bar chart follow-up {.unnumbered}\n\n### Part a {.unnumbered}\n\nReflect on the `ggplot()` code.\n\n-   What's the purpose of the `+`? When do we use it? To add layers, themes, etc \n\n-   We added the bars using `geom_bar()`? Why \"geom\"? Stands for geometric object \n\n-   What does `labs()` stand for? Labels \n\n-   What's the difference between `color` and `fill`? Outline vs coloring inside the lines\n\n### Part b {.unnumbered}\n\nIn general, bar charts allow us to examine the following properties of a *categorical* variable:\n\n-   **observed categories**: What categories did we observe?\n-   **variability between categories**: Are observations evenly spread out among the categories, or are some categories more common than others?\n\nWe must then *translate* this information into the *context* of our analysis, here hikes in the Adirondacks. Summarize here what you learned from the bar chart, in context.\n\nThe most common hike was moderate, followed by easy, followed by difficult. \n\n### Part c {.unnumbered}\n\nIs there anything you don't like about this barplot? For example: check out the x-axis again.\n\nI don't like the order of the cateogries listed (it should be easy, moderate, difficult)\n\n\\\n\\\n\\\n\\\n\n## Exercise 6: Sad bar chart {.unnumbered}\n\nLet's now consider some research questions related to the *quantitative* `elevation` variable:\n\nAmong the hikes, what's the *range* of elevation and how are the hikes *distributed* within this range (e.g. evenly, in clumps, \"normally\")? What's a *typical* elevation? Are there any *outliers*, i.e. hikes that have unusually high or low elevations?\n\nHere:\n\n-   Construct a **bar chart** of the *quantitative* `elevation` variable.\n-   Explain why this might *not* be an effective visualization for this and other quantitative variables. (What questions does / doesn't it help answer?)\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-15_880ed9ac982fe67cbdcb0ec20297198f'}\n\n```{.r .cell-code}\nggplot(hikes, aes(x=elevation))+ \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThe bars are so thin, because each individual elevation is not repeated (it is not categorical). \n\n\\\n\\\n\\\n\\\n\n## Exercise 7: A histogram of elevation {.unnumbered}\n\nQuantitative variables require different viz than categorical variables. Especially when there are many possible outcomes of the quantitative variable, it's typically insufficient to simply count up the number of times we've observed a particular outcome (as the bar graph did above). It gives us a sense of ranges and typical outcomes, but not a good sense of how the observations are distributed across this range. We'll explore two methods for graphing quantitative variables: histograms and density plots.\n\n**Histograms** are constructed by (1) dividing up the observed range of the variable into 'bins' of equal width; and (2) counting up the number of cases that fall into each bin. Check out the example below:\n\n![](https://mac-stat.github.io/images/112/histogram_demo.png){width=\"50%\"}\n\n### Part a {.unnumbered}\n\nLet's dig into some details.\n\n-   How many hikes have an elevation between 4500 and 4700 feet? About 6 hikes \n\n-   How many total hikes have an elevation of at least 5100 feet? About 2 hikes \n\n### Part b {.unnumbered}\n\nNow the bigger picture. In general, histograms allow us to examine the following properties of a *quantitative* variable:\n\n-   **typical outcome:** Where’s the center of the data points? What's typical?\n-   **variability & range:** How spread out are the outcomes? What are the max and min outcomes?\n-   **shape:** How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)?\n-   **outliers:** Are there any outliers, i.e. outcomes that are unusually large/small?\n\nWe must then *translate* this information into the *context* of our analysis, here hikes in the Adirondacks. Addressing each of the features in the above list, summarize here what you learned from the histogram, in context.\n\nMost hikes in this data set have an elevation from 4000ft to 4800ft. This data is right-skewed (uni modal). There don't seem to be any extreme outliers. The data is not very spread out, and seems centered around 4400ft. \n\n\\\n\\\n\\\n\\\n\n## Exercise 8: Building histograms (part 1) {.unnumbered}\n\n2-MINUTE CHALLENGE: Thinking of the bar chart code, try to *intuit* what line you can tack on to the below frame of `elevation` to add a histogram layer. Don't forget a `+`. If it doesn't come to you within 2 minutes, *no problem* -- all will be revealed in the next exercise.\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-16_67ffadc7c5d62fa666365950467b6b9e'}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = elevation))+\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n## Exercise 9: Building histograms (part 2) {.unnumbered}\n\nLet's build some histograms. Try each chunk below, *one by one*. In each chunk, make a comment about how both the code and the corresponding plot both changed.\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-17_77a966034d6a98ebe561d6bfdb03ac4b'}\n\n```{.r .cell-code}\n# COMMENT on the change in the code and the corresponding change in the plot\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-18_9f20e16955b4b0bd48d6a08f6a30258d'}\n\n```{.r .cell-code}\n# Outlines are white \nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-19_0deb8a25057469512e001310e2e0f2ef'}\n\n```{.r .cell-code}\n# Bins are blue \nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", fill = \"blue\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-20_72f816488b941ba0814455ef0ddd9984'}\n\n```{.r .cell-code}\n# Bins are not blue anymore, and x and y labels have been added\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-21_1d0177cefd676c5caff00a56cd487ae3'}\n\n```{.r .cell-code}\n# Bin width increased, resulting in fewer bins \nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 1000) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-22_1139c35c037089a55f9aeb2785ca4fbf'}\n\n```{.r .cell-code}\n# Bin width is now 5, so there are far more bins \nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 5) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-23_263735a75168bb5a36670761d9398be5'}\n\n```{.r .cell-code}\n# The bin width is now 200, which gives us the original histogram. \nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 200) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n## Exercise 10: Histogram follow-up {.unnumbered}\n\n-   What function added the histogram layer / geometry? geom_histogram()\n\n-   What's the difference between `color` and `fill`? color outlines the bin and fill fills in the bins \n\n-   Why does adding `color = \"white\"` improve the visualization? It tells us where the bins start and end. \n\n-   What did `binwidth` do? Changes the width of the bins \n\n-   Why does the histogram become ineffective if the `binwidth` is too big (e.g. 1000 feet)?\nIt does not give us enough information. \n\n-   Why does the histogram become ineffective if the `binwidth` is too small (e.g. 5 feet)?\nIt becomes a bar chart, and because this data is continuous, putting them into small bins is not helpful. \n\n\n\\\n\\\n\\\n\\\n\n## Exercise 11: Density plots {.unnumbered}\n\n**Density plots** are essentially smooth versions of the histogram. Instead of sorting observations into discrete bins, the \"density\" of observations is calculated across the entire range of outcomes. The greater the number of observations, the greater the density! The density is then scaled so that the area under the density curve **always equals 1** and the area under any fraction of the curve represents the fraction of cases that lie in that range.\n\nCheck out a density plot of elevation. Notice that the y-axis (density) has no contextual interpretation -- it's a relative measure. The *higher* the density, the more *common* are elevations in that range.\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-24_ec97f4445964dd4f88af1dab28a8b96f'}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = elevation)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n**Questions**\n\n-   INTUITION CHECK: Before tweaking the code and thinking back to `geom_bar()` and `geom_histogram()`, how do you *anticipate* the following code will change the plot?\n\n    -   `geom_density(color = \"blue\")` \nThe line (outline) will be blue \n    -   `geom_density(fill = \"orange\")` \nThe area under the line will be orange \n\n-   TRY IT! Test out those lines in the chunk below. Was your intuition correct?\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-25_2e256ad3da1755a278a09591d1b1f03c'}\n\n```{.r .cell-code}\nggplot(hikes, aes(x = elevation)) +\n  geom_density(color= 'blue', fill='orange')\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n-   Examine the density plot. How does it compare to the histogram? What does it tell you about the *typical* elevation, *variability / range* in elevations, and *shape* of the distribution of *elevations* within this range?\n\nIt tells us that the typical elevation was about 4125ft, and that the data was positively skewed. \n\n\\\n\\\n\\\n\\\n\n## Exercise 12: Density plots vs histograms {.unnumbered}\n\nThe histogram and density plot both allow us to visualize the behavior of a quantitative variable: typical outcome, variability / range, shape, and outliers. What are the pros/cons of each? What do you like/not like about each?\n\nI like that histograms let you see how skewed the data is, as well as any possible outliers without you having to go through the data table. \nI like that density plots tell you the proportion of values in each range (bin). I don't like density plots because I feel they are less intuitive. \n\n\\\n\\\n\\\n\\\n\n## Exercise 13: Code = communication {.unnumbered}\n\nWe *obviously* won't be done until we talk about communication. All code above has a similar *general* structure (where the details can change):\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-26_8d4839ee9d05d1bd1720a68c423da39b'}\n\n```{.r .cell-code}\nggplot(___, aes(x = ___)) + \n  geom___(color = \"___\", fill = \"___\") + \n  labs(x = \"___\", y = \"___\")\n```\n:::\n\n\n-   Though not *necessary* to the code working, it's common, good practice to *indent* or *tab* the lines of code after the first line (counterexample below). Why?\n\nIt tells you that all the layers are part of the same line. \n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-27_cf0c69c50981299b32b848623d89f51f'}\n\n```{.r .cell-code}\n# YUCK\nggplot(hikes, aes(x = elevation)) +\ngeom_histogram(color = \"white\", binwidth = 200) +\nlabs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n-   Though not *necessary* to the code working, it's common, good practice to put a *line break* after each `+` (counterexample below). Why? It is easier to read. \n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-28_02c5e326a26b885ef96f8641d203d71d'}\n\n```{.r .cell-code}\n# YUCK \nggplot(hikes, aes(x = elevation)) + geom_histogram(color = \"white\", binwidth = 200) + labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n## Exercise 14: Practice {.unnumbered}\n\n### Part a {.unnumbered}\n\nPractice your viz skills to learn about some of the variables in one of the following datasets from the previous class:\n\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-29_472bc7f280f11624c8f95619142a32c8'}\n\n```{.r .cell-code}\n# Data on students in this class\nsurvey <- read.csv(\"https://ajohns24.github.io/data/112/about_us_2024.csv\")\n\n# World Cup data\nworld_cup <- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv\")\n```\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-30_03d447daaa63d6ef1e3ec22e02260d5e'}\n\n```{.r .cell-code}\n#Brasil has won the most world cups \nggplot(world_cup, aes(x=winner))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-31_8dd9e9f708257a9ca2aec82a2ff3d8ab'}\n\n```{.r .cell-code}\nggplot(world_cup, aes(x=year, y=attendance))+ \n  geom_point()+\n  geom_smooth(method='lm')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='data_viz_cache/html/unnamed-chunk-32_73d60aa1049d28bd6df3ce12db54a918'}\n\n```{.r .cell-code}\nggplot(world_cup, aes(x=games, y=attendance))+\n  geom_point()+\n  geom_smooth(method='lm')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](data_viz_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n### Part b {.unnumbered}\n\nCheck out the [RStudio Data Visualization cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf) to learn more features of `ggplot`.\n\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n\\\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}